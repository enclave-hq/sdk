#!/usr/bin/env node

// ZKPay Client Library Âø´ÈÄüVerifyTest
// Áî®‰∫éÂø´ÈÄüVerifyclient-libraryÁöÑÂü∫Êú¨FunctionÊòØÂê¶Normal

// Âä†ËΩΩEnvironmentÂèòÈáè
require('dotenv').config();

const { ZKPayClient } = require('../core/zkpay-client-library');
const { createLogger } = require('../utils/logger');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

/**
 * Âø´ÈÄüVerifyTest
 */
class QuickClientLibraryTest {
    constructor() {
        this.config = null;
        this.logger = createLogger('QuickTest');
        this.client = null;
        this.testResults = [];
    }

    /**
     * ÂàùÂßãÂåñ
     */
    async initialize() {
        console.log(chalk.blue('üîß ÂàùÂßãÂåñÂø´ÈÄüTest...'));
        
        // CleanupLog
        this.clearLogs();
        
        // UseÂèÇÊï∞ÂåñConfiguration
        const options = {
            apiConfig: {
                baseURL: process.env.ZKPAY_BACKEND_URL || 'https://backend.zkpay.network',
                timeout: 300000
            }
        };
        
        // CreateÂÆ¢Êà∑Á´Ø
        this.client = new ZKPayClient(this.logger, options);
        await this.client.initialize();
        
        console.log(chalk.green('‚úÖ Âø´ÈÄüTestÂàùÂßãÂåñcompleted'));
    }

    /**
     * CleanupLog
     */
    clearLogs() {
        const logFiles = [
            './zkpay-client-library/e2e-test.log',
            './zkpay-client-library/exceptions.log',
            './zkpay-client-library/rejections.log'
        ];
        
        logFiles.forEach(file => {
            if (fs.existsSync(file)) {
                fs.unlinkSync(file);
            }
        });
    }


    /**
     * ExecuteTest
     */
    async runTest(name, testFn) {
        console.log(chalk.cyan(`üß™ Test: ${name}`));
        const startTime = Date.now();
        
        try {
            const result = await testFn();
            const duration = Date.now() - startTime;
            
            console.log(chalk.green(`‚úÖ ${name} - Pass (${duration}ms)`));
            this.testResults.push({ name, success: true, duration, result });
            return result;
        } catch (error) {
            const duration = Date.now() - startTime;
            
            console.log(chalk.red(`‚ùå ${name} - failed: ${error.message}`));
            this.testResults.push({ name, success: false, duration, error: error.message });
            throw error;
        }
    }

    /**
     * Âø´ÈÄüVerifyÊµÅÁ®ã
     */
    async runQuickValidation() {
        console.log(chalk.blue('\nüöÄ StartingZKPay Client LibraryÂø´ÈÄüVerify...\n'));
        
        try {
            // 1. TestÂàùÂßãÂåñ
            await this.runTest('ÂÆ¢Êà∑Á´ØÂàùÂßãÂåñ', async () => {
                return {
                    initialized: this.client.isInitialized,
                    apiConnected: (await this.client.testApiConnection()).success
                };
            });

            // 2. TestÁôªÂΩï
            const loginResult = await this.runTest('UserÁôªÂΩï', async () => {
                const privateKey = process.env.TEST_USER_PRIVATE_KEY;
                if (!privateKey) {
                    throw new Error('PleaseËÆæÁΩÆEnvironmentÂèòÈáè TEST_USER_PRIVATE_KEY');
                }
                return await this.client.login(privateKey);
            });

            // 3. TestTokenOperation
            await this.runTest('TokenOperation', async () => {
                const chainId = 714;  // SLIP44 BSC
                const tokenAddress = '0xbFBD79DbF5369D013a3D31812F67784efa6e0309'; // BSC Testnet USDT
                
                const balance = await this.client.checkTokenBalance(chainId, tokenAddress);
                // Ë∑≥ËøáÊéàÊùÉCheckÔºåÂõ†‰∏∫ÈúÄË¶ÅTreasuryAddressConfiguration
                // const allowance = await this.client.checkTokenAllowance(chainId, tokenAddress);
                
                return { balance, message: 'Token‰ΩôÈ¢ùChecksuccessful' };
            });

            // 4. TestCheckBookQuery
            const deposits = await this.runTest('CheckBookQuery', async () => {
                return await this.client.getUserDeposits();
            });

            // 5. Â¶ÇÊûúÊúâDepositËÆ∞ÂΩïÔºåTestCheckBookDetails
            if (deposits && deposits.length > 0) {
                await this.runTest('CheckBookDetails', async () => {
                    const checkbookId = deposits[0].checkbookId || deposits[0].checkbook_id;
                    if (!checkbookId) {
                        throw new Error(`DepositËÆ∞ÂΩï‰∏≠checkbook_id‰∏∫Á©∫: ${JSON.stringify(deposits[0])}`);
                    }
                    return await this.client.getCheckbookDetails(checkbookId);
                });
            }

            // DisplayResult
            this.displayQuickResults();
            
            return true;

        } catch (error) {
            console.log(chalk.red(`\n‚ùå Âø´ÈÄüVerifyfailed: ${error.message}\n`));
            this.displayQuickResults();
            return false;
        }
    }

    /**
     * ExecuteÂÆåÊï¥ÁöÑFunctionTestÔºàÂåÖÂê´ÂÆûÈôÖ‰∫§ÊòìÔºâ
     */
    async runFullFunctionalTest() {
        console.log(chalk.blue('\nüöÄ StartingÂÆåÊï¥FunctionTestÔºàÂåÖÂê´ÂÆûÈôÖ‰∫§ÊòìÔºâ...\n'));
        
        try {
            // ÂÖàExecuteÂø´ÈÄüVerify
            const quickResult = await this.runQuickValidation();
            if (!quickResult) {
                throw new Error('Âø´ÈÄüVerifyfailedÔºåË∑≥ËøáÂÆåÊï¥Test');
            }

            console.log(chalk.blue('\nüîÑ ÁªßÁª≠ÂÆåÊï¥FunctionTest...\n'));

            // 6. TestDeposit
            const depositResult = await this.runTest('DepositOperation', async () => {
                const chainId = 714;  // SLIP44 BSC
                const tokenAddress = '0xbFBD79DbF5369D013a3D31812F67784efa6e0309'; // BSC Testnet USDT
                const amount = '2.0'; // ÊúÄ‰ΩéAmountË¶ÅÊ±Ç
                
                return await this.client.deposit(chainId, tokenAddress, amount);
            });

            // 7. WaitDepositÊ£ÄÊµã
            const depositRecord = await this.runTest('DepositÊ£ÄÊµã', async () => {
                return await this.client.waitForDepositDetection(
                    depositResult.deposit.txHash,
                    56,
                    60
                );
            });

                    // 8. WaitcheckbookStatusÂèò‰∏∫ready_for_commitment
        await this.runTest('WaitcheckbookÂáÜÂ§á', async () => {
            return await this.client.waitForCheckbookReady(depositRecord.checkbook_id); // UseDefault60ÁßíË∂ÖÊó∂
        });

            // 9. TestÂàÜÈÖçÂíåSignature
            await this.runTest('ÂàÜÈÖçÂíåSignature', async () => {
                const allocations = [
                    {
                        recipient_chain_id: 714,  // SLIP44 BSC
                        recipient_address: this.client.getCurrentUser().address,
                        amount: "1800000", // 1.8 USDT (6‰ΩçÁ≤æÂ∫¶ÔºåÊâ£Èô§ÊâãÁª≠Ë¥πÂêéÁöÑÂèØÁî®Amount)
                    }
                ];
                
                return await this.client.executeCommitmentSync(
                    depositRecord.checkbook_id,
                    allocations,
                    true // WaitÂà∞with_checkbookStatus
                );
            });

            // 10. TestCommitmentStatusVerifyÔºàË∑≥ËøáÈáçÂ§çExecuteÔºâ
            await this.runTest('CommitmentStatusVerify', async () => {
                const details = await this.client.getCheckbookDetails(depositRecord.checkbook_id);
                if (details.status !== 'with_checkbook') {
                    throw new Error(`ÊúüÊúõStatus‰∏∫with_checkbookÔºåÂÆûÈôÖ‰∏∫${details.status}`);
                }
                return { status: details.status, message: 'CommitmentStatusVerifysuccessful' };
            });

            // 11. TestÊèêÁé∞ËØÅÊòéGenerate
            await this.runTest('ÊèêÁé∞ËØÅÊòéGenerate', async () => {
                const recipientInfo = {
                    chain_id: 714,  // SLIP44 BSC
                    address: this.client.getCurrentUser().address,
                    amount: "1800000", // 1.8 USDT (6‰ΩçÁ≤æÂ∫¶)
                    token_symbol: "TUSDT"
                };
                
                return await this.client.generateProofSync(
                    depositRecord.checkbook_id,
                    recipientInfo,
                    true
                );
            });

            console.log(chalk.green('\nüéâ ÂÆåÊï¥FunctionTestÂÖ®ÈÉ®PassÔºÅ'));
            this.displayQuickResults();
            
            return true;

        } catch (error) {
            console.log(chalk.red(`\n‚ùå ÂÆåÊï¥FunctionTestfailed: ${error.message}\n`));
            this.displayQuickResults();
            return false;
        }
    }

    /**
     * DisplayÂø´ÈÄüTestResult
     */
    displayQuickResults() {
        console.log('\n' + chalk.blue('üìä ====== Âø´ÈÄüTestResult ======'));
        
        const successCount = this.testResults.filter(t => t.success).length;
        const totalCount = this.testResults.length;
        const successRate = ((successCount / totalCount) * 100).toFixed(1);
        
        console.log(`ÊÄªTest: ${totalCount}, Pass: ${chalk.green(successCount)}, failed: ${chalk.red(totalCount - successCount)}`);
        console.log(`successfulÁéá: ${successRate}%`);
        
        this.testResults.forEach(test => {
            const icon = test.success ? '‚úÖ' : '‚ùå';
            const color = test.success ? chalk.green : chalk.red;
            console.log(`${icon} ${color(test.name)} (${test.duration}ms)`);
            
            if (!test.success) {
                console.log(`   ${chalk.red('Error:')} ${test.error}`);
            }
        });
        
        console.log('================================\n');
    }

    /**
     * Cleanup
     */
    async cleanup() {
        if (this.client) {
            await this.client.cleanup();
        }
    }
}

// CLIProcess
async function main() {
    const args = process.argv.slice(2);
    const testType = (args.includes('--full') || args.includes('functional')) ? 'full' : 'quick';
    
    console.log(chalk.blue('üîß ZKPay Client Library VerifyTest\n'));
    
    try {
        const test = new QuickClientLibraryTest();
        await test.initialize();
        
        let success;
        if (testType === 'full') {
            success = await test.runFullFunctionalTest();
        } else {
            success = await test.runQuickValidation();
        }
        
        await test.cleanup();
        
        if (success) {
            console.log(chalk.green('üéâ ZKPay Client Library VerifyPassÔºÅ'));
        } else {
            console.log(chalk.red('‚ùå ZKPay Client Library VerifyfailedÔºÅ'));
        }
        
        process.exit(success ? 0 : 1);
        
    } catch (error) {
        console.error(chalk.red('‚ùå TestExecutefailed:'), error.message);
        process.exit(1);
    }
}

// ÂØºÂá∫
module.exports = { QuickClientLibraryTest };

// Áõ¥Êé•ËøêË°å
if (require.main === module) {
    main();
}
