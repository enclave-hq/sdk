/**
 * API request and response type definitions
 * @module types/api
 */

import type {
  Checkbook,
  Allocation,
  WithdrawRequest,
  WithdrawRequestDetail,
  TokenPrice,
  Pool,
  Token,
  UniversalAddress,
  PaginatedResponse,
  UserStats,
  TokenStats,
} from './models';

// ============ Common API Types ============

/**
 * Standard API response wrapper
 */
export interface APIResponse<T = any> {
  /** Success status */
  success: boolean;
  /** Response data */
  data?: T;
  /** Error message if failed */
  error?: string;
  /** Error code if failed */
  errorCode?: string;
  /** Response timestamp */
  timestamp?: number;
}

/**
 * Standard error response
 */
export interface APIError {
  /** Error message */
  message: string;
  /** Error code */
  code: string;
  /** HTTP status code */
  statusCode: number;
  /** Additional error details */
  details?: Record<string, any>;
}

// ============ Authentication ============

/**
 * Authentication request
 */
export interface AuthRequest {
  /** User's universal address */
  address: UniversalAddress;
  /** Chain ID */
  chainId: number;
  /** Signed message */
  signature: string;
  /** Message that was signed */
  message: string;
}

/**
 * Authentication response
 */
export interface AuthResponse {
  /** JWT token */
  token: string;
  /** User's address */
  user_address: UniversalAddress;
}

/**
 * Token refresh request
 */
export interface RefreshTokenRequest {
  /** Current token */
  token: string;
}

/**
 * Token refresh response
 */
export interface RefreshTokenResponse {
  /** New JWT token */
  token: string;
  /** New expiration time */
  expiresAt: number;
}

// ============ Checkbooks (merged with Deposits) ============

/**
 * List checkbooks request
 */
export interface ListCheckbooksRequest {
  /** Owner address (optional, defaults to authenticated user) */
  owner?: string;
  /** Filter by status */
  status?: string;
  /** Filter by token ID */
  tokenId?: string;
  /** Page number */
  page?: number;
  /** Items per page */
  limit?: number;
}

/**
 * List checkbooks response
 */
export interface ListCheckbooksResponse extends PaginatedResponse<Checkbook> {}

/**
 * Get checkbook by ID request
 */
export interface GetCheckbookRequest {
  /** Checkbook ID */
  id: string;
}

/**
 * Get checkbook response
 */
export interface GetCheckbookResponse {
  /** Checkbook data */
  checkbook: Checkbook;
}

// ============ Allocations ============

/**
 * List allocations request
 */
export interface ListAllocationsRequest {
  /** Owner address (optional) */
  owner?: string;
  /** Filter by checkbook ID */
  checkbookId?: string;
  /** Filter by token ID */
  tokenId?: string;
  /** Filter by status */
  status?: string;
  /** Page number */
  page?: number;
  /** Items per page */
  limit?: number;
}

/**
 * List allocations response
 */
export interface ListAllocationsResponse extends PaginatedResponse<Allocation> {}

/**
 * Create allocations (commitment) request
 */
export interface CreateAllocationsRequest {
  /** Checkbook ID */
  checkbookId: string;
  /** Array of amounts */
  amounts: string[];
  /** Token ID */
  tokenId: string;
  /** User's signature */
  signature: string;
  /** Message that was signed */
  message: string;
  /** Commitment hashes (optional, generated by backend if not provided) */
  commitments?: string[];
}

/**
 * Create allocations response
 */
export interface CreateAllocationsResponse {
  /** Created allocations */
  allocations: Allocation[];
  /** Updated checkbook */
  checkbook: Checkbook;
}

// ============ Withdrawals ============

/**
 * List withdrawal requests request
 */
export interface ListWithdrawRequestsRequest {
  /** Owner address (optional) */
  owner?: string;
  /** Filter by status */
  status?: string;
  /** Filter by token ID */
  tokenId?: string;
  /** Filter by target chain */
  targetChain?: number;
  /** Page number */
  page?: number;
  /** Items per page */
  limit?: number;
}

/**
 * List withdrawal requests response
 */
export interface ListWithdrawRequestsResponse extends PaginatedResponse<WithdrawRequest> {}

/**
 * Get withdrawal request by ID request
 */
export interface GetWithdrawRequestRequest {
  /** Withdraw request ID */
  id: string;
}

/**
 * Get withdrawal request response
 */
export interface GetWithdrawRequestResponse {
  /** Withdraw request data with full allocations */
  withdrawRequest: WithdrawRequestDetail;
}

/**
 * Get withdrawal request by nullifier request
 */
export interface GetWithdrawRequestByNullifierRequest {
  /** Nullifier hash */
  nullifier: string;
}

/**
 * Create withdrawal request request
 */
export interface CreateWithdrawRequestRequest {
  /** Array of allocation IDs */
  allocationIds: string[];
  /** Target chain ID */
  targetChain: number;
  /** Target address */
  targetAddress: string;
  /** Intent type */
  intent: string;
  /** User's signature */
  signature: string;
  /** Message that was signed */
  message: string;
  /** Nullifier hash */
  nullifier: string;
  /** ZK proof (optional, may be generated by backend) */
  proof?: string;
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Create withdrawal request response
 */
export interface CreateWithdrawRequestResponse {
  /** Created withdraw request */
  withdrawRequest: WithdrawRequestDetail;
}

/**
 * Retry withdrawal request request
 */
export interface RetryWithdrawRequestRequest {
  /** Withdraw request ID */
  id: string;
}

/**
 * Retry withdrawal request response
 */
export interface RetryWithdrawRequestResponse {
  /** Updated withdraw request */
  withdrawRequest: WithdrawRequest;
}

/**
 * Cancel withdrawal request request
 */
export interface CancelWithdrawRequestRequest {
  /** Withdraw request ID */
  id: string;
}

/**
 * Cancel withdrawal request response
 */
export interface CancelWithdrawRequestResponse {
  /** Cancelled withdraw request */
  withdrawRequest: WithdrawRequest;
}

/**
 * Get withdrawal statistics request
 */
export interface GetWithdrawStatsRequest {
  /** Owner address (optional) */
  owner?: string;
  /** Token ID (optional) */
  tokenId?: string;
}

/**
 * Get withdrawal statistics response
 */
export interface GetWithdrawStatsResponse {
  /** Total withdrawals count */
  totalCount: number;
  /** Pending withdrawals count */
  pendingCount: number;
  /** Completed withdrawals count */
  completedCount: number;
  /** Failed withdrawals count */
  failedCount: number;
  /** Total withdrawn amount */
  totalAmount: string;
  /** Breakdown by token */
  byToken: TokenStats[];
}

// ============ Pools & Tokens ============

/**
 * List pools request
 */
export interface ListPoolsRequest {
  /** Filter by active status */
  isActive?: boolean;
}

/**
 * List pools response
 */
export interface ListPoolsResponse {
  /** Array of pools */
  pools: Pool[];
}

/**
 * Get pool by ID request
 */
export interface GetPoolRequest {
  /** Pool ID */
  id: string;
}

/**
 * Get pool response
 */
export interface GetPoolResponse {
  /** Pool data */
  pool: Pool;
}

/**
 * List tokens request
 */
export interface ListTokensRequest {
  /** Filter by active status */
  isActive?: boolean;
  /** Filter by chain ID */
  chainId?: number;
}

/**
 * List tokens response
 */
export interface ListTokensResponse {
  /** Array of tokens */
  tokens: Token[];
}

/**
 * Get token by ID request
 */
export interface GetTokenRequest {
  /** Token ID */
  id: string;
}

/**
 * Get token response
 */
export interface GetTokenResponse {
  /** Token data */
  token: Token;
}

// ============ Token Prices ============

/**
 * Get token prices request
 */
export interface GetTokenPricesRequest {
  /** Array of token symbols */
  symbols?: string[];
}

/**
 * Get token prices response
 */
export interface GetTokenPricesResponse {
  /** Array of token prices */
  prices: TokenPrice[];
  /** Response timestamp */
  timestamp: number;
}

// ============ User Statistics ============

/**
 * Get user statistics request
 */
export interface GetUserStatsRequest {
  /** User address (optional, defaults to authenticated user) */
  address?: string;
}

/**
 * Get user statistics response
 */
export interface GetUserStatsResponse {
  /** User statistics */
  stats: UserStats;
}

// ============ KMS (Key Management Service) ============

/**
 * KMS signature request
 */
export interface KMSSignRequest {
  /** Data to sign (hex string) */
  data: string;
  /** Key ID to use for signing */
  keyId?: string;
}

/**
 * KMS signature response
 */
export interface KMSSignResponse {
  /** Signature (hex string) */
  signature: string;
  /** Public key used for signing */
  publicKey: string;
}

/**
 * KMS public key request
 */
export interface KMSPublicKeyRequest {
  /** Key ID */
  keyId?: string;
}

/**
 * KMS public key response
 */
export interface KMSPublicKeyResponse {
  /** Public key (hex string) */
  publicKey: string;
  /** Key ID */
  keyId: string;
}

// ============ Health Check ============

/**
 * Health check response
 */
export interface HealthCheckResponse {
  /** Service status */
  status: 'ok' | 'degraded' | 'down';
  /** Current timestamp */
  timestamp: number;
  /** Service version */
  version?: string;
  /** Additional health info */
  details?: Record<string, any>;
}

